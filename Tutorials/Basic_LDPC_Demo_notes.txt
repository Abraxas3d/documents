We need LDPC encoding and decoding for Phase 4 Ground. 

These notes are a narrative of the process of learning about the LDPC-related blocks in GNU radio. 

LDPC stands for low density parity check. This is a type of forward error correcting code used in DVB. We're going to need both encoders and decoders. 

First, we looked at the LDPC Encoder in the DVB section. 

There’s an ID field (all GNU radio blocks have one), a Standard selection (DVB-S2 or DVB-T2), FECFRAME size selection (normal or short), Code Rate (lots of choices), and Constellation (Other and 128APSK). 

The medium FECFRAME size from DVB-S2X is not available yet. There is an additional DVB-S2X frame size of 32400 bits. DVB-S2 has short (was “normal”) 16200 bits and long 64800 bits.  

DVB-S2X Very Low SNR code rates are not available yet, but they will be!

I wasn't sure why there was only two constellations listed in the drop-down box. There are many constellations? Why would you need to know the constellation in the first place? An encoder shouldn't care what the constellation looks like to work, right? 

Well, there is an answer! Block author Ron Economos explained that is has to do with paragraph in section 5.3.2 of the DVB-S2X spec. 

"For 128APSK padding is introduced to have an integer number of constellation points and slots in a FECFRAME. 6 zeros shall be appended at the end of the FECFRAME after FEC encoding."

Therefore you do actually need to know if it's 128APSK because for this particular constellation, you need to add some padding to make it the same size as all the other outputs. 

Much more importantly, Ron says he's willing to add the VL-SNR DVB-S2X functionality to this block, which is hugely helpful and just plain awesome.  

The code rates to be added are 2/9 for normal frames, 1/5, 11/45 and 1/3 for medium frames, and 11/45 and 4/15 for short frames. The puncturing/shortening code is something that Ron used in DVB-T2, and it can be re-used here.

The DVB-S2X code rates at the other end of the spectrum (less coding) are actually already in there. 

What is puncturing? Shortening? First, here's the paragraph from the standard that sets down this requirement (5.5.2.6 in part 2 of the DVB-S2X standard). 

"In order for VL-SNR frames to be compatible with legacy DVB-S2 VCM receivers, the PLFRAME length including the mobile header and increased pilot symbols shall be the same as in DVB-S2 PLFRAME. 

This requires reducing the information carrying symbols of VL-SNR frames through shortening and puncturing.

If an LDPC block is shortened, the first Xs information bits shall be set to zero before encoding, and they will not be transmitted. If an LDPC block is punctured, every Pth parity bit starting with the first parity bit, p0, (i.e. p0, pP, p2P, …) will not be transmitted until the desired number of punctured bits, Xp, is achieved."

VL-SNR stands for very low signal to noise ratio
VCM stands for variable coding and modulation
PLFRAME stands for physical layer frame 

Essentially, when you use a lot of coding, which means that you are adding a large amount of redundancy to the information bits, and you end up with more symbols than you usually deal with or can fit into a fixed frame size, and you are not interested in changing this fixed frame size due to things like backwards compatibility, then you have to cull the herd. 

There are tables beneath the paragraph quoted above that specifically call out the values of Xs, P, and Xp for each of the affected modcods.

"The motivation for these operations is to make the size of VL-SNR frames, in the presence of 900 symbol mobile header and extra pilot symbols, the same as the size of a legacy DVB-S2 frame size. That way, the new VL-SNR frames can be used together with legacy S2 VCM/ACM receivers where the legacy receivers would
just skip the VL-SNR frames." -Annex B

So, what needs to happen with this block?

First, we should understand how to use it. I’m trying to make a demo. If you already have or know of one, or are better at GNU radio, your help will be appreciated. My scheme is to create random inputs, save a copy, send the other copy to LDPC encode, then LDPC decode, and compare the before and after. This may sound pedantic, but you have to start somewhere, and I’m “GNU” at this. 

LDPC Encoder “Documentation” tab has the following content. 

--- dtv_dvb_ldpc_bb ---

        make(gr::dtv::dvb_standard_t standard, gr::dtv::dvb_framesize_t framesize, gr::dtv::dvb_code_rate_t rate, gr::dtv::dvb_constellation_t constellation) -> dvb_ldpc_bb_sptr
        Encodes a LDPC (Low-Density Parity-Check) FEC.
        Input: Variable length FEC baseband frames with appended BCH (BCHFEC). Output: Normal or short FEC baseband frames with appended LPDC (LDPCFEC).
        Constructor Specific Documentation:
        Create a baseband frame LDPC encoder.
        Args:
            standard : DVB standard (DVB-S2 or DVB-T2).
            framesize : FEC frame size (normal or short).
            rate : FEC code rate.
            constellation : DVB-S2 constellation.





A file related to this block seems to be ldpc_encoder.h

This is a header file with the same name as the block we’re looking at. Here’s the contents of this file:

/* -*- c++ -*- */
/*
 * Copyright 2015 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifndef INCLUDED_LDPC_ENCODER_H
#define INCLUDED_LDPC_ENCODER_H

#include <gnuradio/fec/encoder.h>
#include <string>
#include <vector>

namespace gr {
  namespace fec {

    class FEC_API ldpc_encoder : virtual public generic_encoder
    {
    public:
      static generic_encoder::sptr make (std::string alist_file);

      virtual double rate() = 0;
      virtual bool set_frame_size(unsigned int frame_size) = 0;
      virtual int get_output_size() = 0;
      virtual int get_input_size() = 0;
    };

  }
}

#endif /* INCLUDED_LDPC_ENCODER_H */




































The next block is LDPC Encoder Definition. 

The default ID field is variable_ldpc_encoder_def_0

The Parallelism drop down selector has 0, 1, and 2 as choices.

The AList File is a file selector. 

There is no documentation in the documentation tab.

When this block is placed, then “Value "fec.ldpc_encoder_make("")" cannot be evaluated:
Bad AList file name!” is the message in the console. 

an xml file called ldpc_encoder_def_list.xml has the following contents:



<?xml version="1.0"?>

<block>
  <name>LDPC Encoder Definition</name>
  <key>variable_ldpc_encoder_def</key>
  <import>from gnuradio import fec</import>
  <var_make>
#if int($ndim())==0 #
self.$(id) = $(id) = fec.ldpc_encoder_make($file); #slurp
#else if int($ndim())==1 #
self.$(id) = $(id) = map( (lambda a: fec.ldpc_encoder_make($file)), range(0,$dim1) ); #slurp
#else
self.$(id) = $(id) = map( (lambda b: map( ( lambda a: fec.ldpc_encoder_make($file)), range(0,$dim2) ) ), range(0,$dim1)); #slurp
#end if</var_make>
  <var_value>fec.ldpc_encoder_make($file)</var_value>
  <make></make>

  <param>
    <name>Ignore Me</name>
    <key>value</key>
    <value>"ok"</value>
    <type>raw</type>
    <hide>all</hide>
  </param>

  <param>
    <name>Parallelism</name>
    <key>ndim</key>
    <value>0</value>
    <type>enum</type>
    <option>
      <name>0</name>
      <key>0</key>
    </option>
    <option>
      <name>1</name>
      <key>1</key>
    </option>
    <option>
      <name>2</name>
      <key>2</key>
    </option>
  </param>

  <param>
    <name>Dimension 1</name>
    <key>dim1</key>
    <value>1</value>
    <type>int</type>
    <hide>#if (int($ndim()) >= 1) then 'none' else 'all' #</hide>
  </param>

  <param>
    <name>Dimension 2</name>
    <key>dim2</key>
    <value>4</value>
    <type>int</type>
    <hide>#if (int($ndim()) >= 2) then 'none' else 'all' #</hide>
  </param>

  <param>
    <name>AList File</name>
    <key>file</key>
    <value></value>
    <type>file_open</type>
  </param>

</block>



This is the description that’s used to make the GUI in the block? 






